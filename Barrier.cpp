#include <omp.h>#include <chrono>#include <iostream>using namespace std;int nodes(double Threads, int Itr){    omp_set_num_threads(Threads);    //cout<<"Thread: "<< Threads<<'\n';    double wcTime, wcTimeStart, wcTimeEnd, sum = 0.;    wcTimeStart = omp_get_wtime();    double* A = new double[Itr];    double* B = new double[Itr];    double* C = new double[Itr];    for (int i = 0; i < Itr; i++)    {        A[i] = 3.1414;        B[i] = 1.414;        C[i] = 2.2360;    }#pragma omp parallel for    for (int i = 0; i < Itr; i++)    {        A[i] = A[i] + B[i] * C[i];        sum += A[i];    }    //cout << sum<<'\n';    wcTimeEnd = omp_get_wtime();    wcTime = wcTimeEnd - wcTimeStart;    double freq = 2.e9;    cout << (wcTime * freq) / Itr << '\n';    return 0;}int main() {    for (int i = 1; i <= 72; i++)    {        nodes(i, 1.e8);    }